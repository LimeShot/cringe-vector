using System.Windows.Xps.Serialization;

using CringeCraft.GeometryDash.Shape;
using CringeCraft.GeometryDash;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows;
using CringeCraft.Client.View;
using System.Diagnostics;
using CringeCraft.Client.Model.Canvas;
using System.Numerics;

namespace CringeCraft.Client.Model.Tool;

public class Tool {
    private readonly MainWindow _window;
    private readonly MyCanvas _canvas;
    public string CurrentTool { get; set; }
    public event EventHandler<List<IShape>>? OnShapeChanged; // –°–æ–±—ã—Ç–∏–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
    private readonly List<IShape> _selectedShapes; // –°–ø–∏—Å–æ–∫ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ñ–∏–≥—É—Ä


    public Tool(MainWindow window, MyCanvas canvas) {
        _canvas = canvas;
        _window = window;
        CurrentTool = "Line";
        _selectedShapes = new List<IShape>();
        CreateButtonsShapes();
    }

    public void MoveShape() {
        OnShapeChanged?.Invoke(this, _selectedShapes);
    }

    public void ResizeShape() {
        OnShapeChanged?.Invoke(this, _selectedShapes);
    }

    public void TurnShape() {
        OnShapeChanged?.Invoke(this, _selectedShapes);
    }

    // üü¢ –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–≥—É—Ä—ã
    public void CreateButtonsShapes() {
        var stackPanel = new StackPanel() {
            Orientation = Orientation.Vertical, // –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç–æ–ª–±–∏–∫
            HorizontalAlignment = HorizontalAlignment.Right, // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é
            VerticalAlignment = VerticalAlignment.Top, // –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ö–Ω–µ–º—É –∫—Ä–∞—é
            Margin = new Thickness(10) // –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞—ë–≤
        };

        _window.MainGrid.Children.Add(stackPanel);

        foreach (string typeShape in ShapeFactory.AvailableShapes) {
            var button = new Button() {
                Content = typeShape,
                Width = 100,
                Margin = new Thickness(5)
            };
            stackPanel.Children.Add(button);
            button.Click += (s, e) => {
                CurrentTool = typeShape;
                Debug.WriteLine($"–í—ã–±—Ä–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç - {typeShape}");
            }; // –ù–∞ –∫–ª–∏–∫ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–º–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        }
    }

    private void AddShape(MyCanvas canvas, Point startPoint, Point nextPoint) {
        var newShape = ShapeFactory.CreateShape(CurrentTool, new Vector2((float)startPoint.X,
            (float)startPoint.Y), new Vector2((float)nextPoint.X, (float)nextPoint.Y));
        if (newShape != null) {
            canvas.AddShape(newShape);
        }
    }
}